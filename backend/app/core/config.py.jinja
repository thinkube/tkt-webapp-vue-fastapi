# app/core/config.py
from typing import List, Optional
from pydantic import validator
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    # API settings
    API_V1_STR: str = "/api/v1"
    PROJECT_NAME: str = "{{ project_title }}"
    
    # CORS settings
    BACKEND_CORS_ORIGINS: List[str] = []
    
    # Keycloak settings
    KEYCLOAK_URL: str
    KEYCLOAK_REALM: str
    KEYCLOAK_CLIENT_ID: str
    KEYCLOAK_CLIENT_SECRET: str
    KEYCLOAK_VERIFY_SSL: bool = True
    
    # Frontend URL for redirects
    FRONTEND_URL: str
    
    {% if use_postgresql -%}
    # PostgreSQL settings - all from environment
    POSTGRES_HOST: str = "postgresql-official.postgres.svc.cluster.local"
    POSTGRES_PORT: int = 5432
    POSTGRES_USER: str
    POSTGRES_PASSWORD: str
    POSTGRES_DB: str = "{{ project_name | replace('-', '_') }}"
    
    # Allow DATABASE_URL to be overridden by environment
    DATABASE_URL: Optional[str] = None
    
    @validator("DATABASE_URL", pre=True)
    def construct_database_url(cls, v, values):
        """Use DATABASE_URL from environment or construct from parts."""
        if v:
            return v
        # Construct from individual settings
        user = values.get("POSTGRES_USER")
        password = values.get("POSTGRES_PASSWORD")
        host = values.get("POSTGRES_HOST")
        port = values.get("POSTGRES_PORT")
        db = values.get("POSTGRES_DB")
        return f"postgresql://{user}:{password}@{host}:{port}/{db}"
    {% endif %}
    
    {% if enable_cicd_monitoring -%}
    # CI/CD monitoring database
    CICD_DB_NAME: str = "cicd_monitoring"
    {% endif %}

    class Config:
        case_sensitive = True
        env_file = ".env"


settings = Settings()