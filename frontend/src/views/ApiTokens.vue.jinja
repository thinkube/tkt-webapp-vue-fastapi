<template>
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6">{{ "{{" }} t('apiTokens.title') {{ "}}" }}</h1>
    
    <!-- Create Token Form -->
    <div class="card bg-base-200 shadow-xl mb-6">
      <div class="card-body">
        <h2 class="card-title">{{ "{{" }} t('apiTokens.createToken.title') {{ "}}" }}</h2>
        <div class="form-control">
          <label class="label" for="token-name">
            <span class="label-text">{{ "{{" }} t('apiTokens.createToken.nameLabel') {{ "}}" }}</span>
          </label>
          <input 
            id="token-name"
            v-model="newToken.name" 
            type="text" 
            :placeholder="t('apiTokens.createToken.namePlaceholder')" 
            class="input input-bordered"
          />
        </div>
        <div class="form-control">
          <label class="label" for="token-expires">
            <span class="label-text">{{ "{{" }} t('apiTokens.createToken.expiresLabel') {{ "}}" }}</span>
          </label>
          <input 
            id="token-expires"
            v-model.number="newToken.expires_in_days" 
            type="number" 
            :placeholder="t('apiTokens.createToken.expiresPlaceholder')" 
            class="input input-bordered"
          />
        </div>
        <div class="card-actions justify-end mt-4">
          <button 
            @click="createToken" 
            class="btn btn-primary"
            :disabled="!newToken.name || creating"
          >
            <span v-if="creating" class="loading loading-spinner loading-sm"></span>
            {{ "{{" }} t('apiTokens.createToken.createButton') {{ "}}" }}
          </button>
        </div>
      </div>
    </div>

    <!-- New Token Display -->
    <div v-if="createdToken" class="alert alert-success shadow-lg mb-6">
      <div>
        <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <div>
          <h3 class="font-bold">{{ "{{" }} t('apiTokens.tokenCreated.title') {{ "}}" }}</h3>
          <p class="text-sm">{{ "{{" }} t('apiTokens.tokenCreated.message') {{ "}}" }}</p>
          <div class="mockup-code mt-2">
            <pre><code>{{ "{{" }} createdToken.token {{ "}}" }}</code></pre>
          </div>
          <button @click="copyToken" class="btn btn-sm btn-ghost mt-2">
            {{ "{{" }} copied ? t('apiTokens.tokenCreated.copied') : t('apiTokens.tokenCreated.copyButton') {{ "}}" }}
          </button>
        </div>
      </div>
    </div>

    <!-- Token List -->
    <div class="card bg-base-200 shadow-xl">
      <div class="card-body">
        <h2 class="card-title">{{ "{{" }} t('apiTokens.tokenList.title') {{ "}}" }}</h2>
        <div v-if="loading" class="text-center py-4">
          <span class="loading loading-spinner loading-lg"></span>
        </div>
        <div v-else-if="tokens.length === 0" class="text-center py-4">
          <p>{{ "{{" }} t('apiTokens.tokenList.noTokens') {{ "}}" }}</p>
        </div>
        <div v-else class="overflow-x-auto">
          <table class="table">
            <thead>
              <tr>
                <th>{{ "{{" }} t('apiTokens.tokenList.table.name') {{ "}}" }}</th>
                <th>{{ "{{" }} t('apiTokens.tokenList.table.created') {{ "}}" }}</th>
                <th>{{ "{{" }} t('apiTokens.tokenList.table.expires') {{ "}}" }}</th>
                <th>{{ "{{" }} t('apiTokens.tokenList.table.lastUsed') {{ "}}" }}</th>
                <th>{{ "{{" }} t('apiTokens.tokenList.table.actions') {{ "}}" }}</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="token in tokens" :key="token.id">
                <td>{{ "{{" }} token.name {{ "}}" }}</td>
                <td>{{ "{{" }} formatDate(token.created_at) {{ "}}" }}</td>
                <td>{{ "{{" }} token.expires_at ? formatDate(token.expires_at) : t('apiTokens.tokenList.table.never') {{ "}}" }}</td>
                <td>{{ "{{" }} token.last_used ? formatDate(token.last_used) : t('apiTokens.tokenList.table.never') {{ "}}" }}</td>
                <td>
                  <button 
                    @click="revokeToken(token.id)" 
                    class="btn btn-sm btn-error"
                    :disabled="!token.is_active"
                  >
                    {{ "{{" }} token.is_active ? t('apiTokens.tokenList.table.revoke') : t('apiTokens.tokenList.table.revoked') {{ "}}" }}
                  </button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Usage Instructions -->
    <div class="card bg-base-200 shadow-xl mt-6">
      <div class="card-body">
        <h2 class="card-title">{{ "{{" }} t('apiTokens.usage.title') {{ "}}" }}</h2>
        <div class="space-y-4">
          <div>
            <h3 class="font-semibold">{{ "{{" }} t('apiTokens.usage.cli.title') {{ "}}" }}</h3>
            <p class="text-sm text-base-content/70 mb-2">{{ "{{" }} t('apiTokens.usage.cli.description') {{ "}}" }}</p>
            <div class="mockup-code">
              <pre><code>curl -H "Authorization: Bearer YOUR_TOKEN" https://{{ project_name }}.{{ domain_name }}/api/v1/endpoint</code></pre>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { useI18n } from 'vue-i18n'
import api from '@/services/api'

const { t } = useI18n()

// State
const tokens = ref([])
const loading = ref(false)
const creating = ref(false)
const createdToken = ref(null)
const copied = ref(false)
const newToken = ref({
  name: '',
  expires_in_days: null
})

// Format date for display
const formatDate = (dateString) => {
  const date = new Date(dateString)
  return date.toLocaleDateString() + ' ' + date.toLocaleTimeString()
}

// Fetch tokens
const fetchTokens = async () => {
  loading.value = true
  try {
    const response = await api.get('/api/tokens')
    tokens.value = response.data.tokens || []
  } catch (error) {
    console.error('Failed to fetch tokens:', error)
  } finally {
    loading.value = false
  }
}

// Create new token
const createToken = async () => {
  if (!newToken.value.name) {
    alert(t('apiTokens.errors.nameMissing'))
    return
  }

  creating.value = true
  try {
    const response = await api.post('/api/tokens', {
      name: newToken.value.name,
      expires_in_days: newToken.value.expires_in_days || null
    })
    
    createdToken.value = response.data
    newToken.value = { name: '', expires_in_days: null }
    
    // Refresh token list
    await fetchTokens()
  } catch (error) {
    console.error('Failed to create token:', error)
    alert(t('apiTokens.errors.createFailed'))
  } finally {
    creating.value = false
  }
}

// Copy token to clipboard
const copyToken = async () => {
  if (!createdToken.value) return
  
  try {
    await navigator.clipboard.writeText(createdToken.value.token)
    copied.value = true
    setTimeout(() => {
      copied.value = false
    }, 2000)
  } catch (error) {
    console.error('Failed to copy:', error)
  }
}

// Revoke token
const revokeToken = async (tokenId) => {
  if (!confirm(t('apiTokens.tokenList.confirmRevoke'))) {
    return
  }
  
  try {
    await api.delete(`/api/tokens/${tokenId}`)
    await fetchTokens()
  } catch (error) {
    console.error('Failed to revoke token:', error)
    alert(t('apiTokens.errors.revokeFailed'))
  }
}

// Load tokens on mount
onMounted(() => {
  fetchTokens()
})
</script>